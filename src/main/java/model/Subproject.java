package model;

public class Subproject {
    private int id;
    private String name;
    private int completionPercentage;
    private StateStatus status;
    private int projectId;


    /** No-args constructor â€“ required by frameworks and libraries like RowMapper **/
    public Subproject() {
    }

    /** Constructor with all fields except 'id', as it is will be auto-generated by the database **/
    public Subproject(String name, int completionPercentage, StateStatus status, int projectId) {
        this.name = name;
        this.completionPercentage = completionPercentage;
        this.status = status;
        this.projectId = projectId;
    }

    /** Overloaded constructor with optional fields **/
    public Subproject(String name, int projectId){
        this.name = name;
        this.projectId = projectId;
        this.completionPercentage = 0;           /** Default value **/
        this.status = StateStatus.NOT_STARTED;   /** Default value **/
    }

    /** Getter methods **/
    public int getProjectId() {
        return projectId;
    }

    public StateStatus getStatus() {
        return status;
    }

    public int getCompletionPercentage() {
        return completionPercentage;
    }

    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    /** Setter methods **/
    public void setId(int id) {
        if (id < 0)
            throw new IllegalArgumentException("ID can't be less than 0.");
        this.id = id;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty.");
        }
        if (name.length() < 4) {
            throw new IllegalArgumentException("Name must be at least 4 characters long.");
        }
        if (!Character.isUpperCase(name.charAt(0))) {
            throw new IllegalArgumentException("Name must start with an uppercase letter.");
        }
        this.name = name;
    }

    public void setCompletionPercentage(int completionPercentage) {
        if (completionPercentage < 0 || completionPercentage > 100) {
            throw new IllegalArgumentException("Completion percentage must be between 0 and 100.");
        }
        this.completionPercentage = completionPercentage;
    }
    public void setStatus(StateStatus status){
        if (status == null) {
            throw new IllegalArgumentException("Status cannot be null.");
        }
        this.status = status;
    }

    public void setProjectId(int projectId) {
        if (projectId <= 0) {
            throw new IllegalArgumentException("Project ID can't be less than 0.");
        }
        this.projectId = projectId;
    }
}
